/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Neel3Dartist (https://sketchfab.com/Neel91)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/pslv-c40-c7066310704040a9bf0c86d7d21ab94f
Title: PSLV C40
*/

import * as THREE from 'three'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useEffect, useRef } from 'react'
import { gsap } from 'gsap'

type GLTFResult = GLTF & {
  nodes: {
    ['main_Pslv_PSLV-C40_0']: THREE.Mesh
    Plane001_f1_0: THREE.Mesh
  }
  materials: {
    ['PSLV-C40']: THREE.MeshStandardMaterial
    material: THREE.MeshStandardMaterial
  }
}

export function PSLVModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/pslv_c40.glb') as GLTFResult
  const groupRef = useRef<THREE.Group>(null)
  useEffect(() => {
    if (!groupRef.current) return;

    // Animation using GSAP
    gsap.to(groupRef.current.rotation, {
      y: Math.PI * 2,
      duration: 10,
      repeat: -1,
      ease: "linear",
    });
  }, []);

  if (!nodes || !materials) {
    // Optionally, you can render a loading state here
    return null;
  }
  return (
    <group position={[0,-3.5,0]} scale={[0.1,0.1,0.1]}>
    <group {...props} dispose={null} ref={groupRef} >
        <group scale={0.4} >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes['main_Pslv_PSLV-C40_0'].geometry}
        material={materials['PSLV-C40']}
        position={[0, 0, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane001_f1_0.geometry}
        material={materials.material}
        position={[0, 0, 0]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[5.304, 1.861, 1.861]}
      />
      </group>
    </group>
    </group>
  )
}

useGLTF.preload('/pslv_c40.glb')
